{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Psithurism New here? Check out the guide ! A programming language with | pipes.","title":"Psithurism"},{"location":"#psithurism","text":"New here? Check out the guide ! A programming language with | pipes.","title":"Psithurism"},{"location":"documentation/","text":"Documentation","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"guide/","text":"Guide Welcome to the guide to the psithurism programming language. To get started, you could check how to install psithurism, look at the basics of the language, or dive straight into the documentation .","title":"Guide"},{"location":"guide/#guide","text":"Welcome to the guide to the psithurism programming language. To get started, you could check how to install psithurism, look at the basics of the language, or dive straight into the documentation .","title":"Guide"},{"location":"guide/basics/","text":"Basics Tip The example code blocks in this guide may not be valid scripts Comments Comments are written with a # : # this does nothing Literals There's a few types of literals in psithurism: Strings Strings are written between pairs of either double or single quotes. 'Hello' \"reader\" Single quotes Double quotes A single quoted string is assumed to be encoded according to psithurism's codepage. '\u2228' # one byte Note Since there currently is no actual codepage, single and double quoted stings are both assumed to be UTF-8. A double quoted string is assumed to be UTF-8. \"\u2228\" # three bytes Numbers Numbers are pretty straightforward: 7 2.5 .125 - 4.9 This is not allowed however: 3. Lists & Arrays Lists and arrays are similar, but not quite the same. List items are expanded into separate arguments of the next function in the chain. This means nesting lists has no effect. A list is written between parentheses: # these are the same ( 1 , 2 , 3 ) ( 1 , ( 2 , 3 )) The whole array is passed to the next function as one argument. This also allows for nested arrays. An array is written between square brackets: # these are not the same [ 1 , 2 , 3 , 4 ] [[ 1 , 2 ], [ 3 , 4 ]] Regex Just like javascript, psithurism has regex literals: /\\/((?:[^\\/\\\\\\n]|\\\\[^])*)\\/([gimuynsxA]*)/s Psithurism uses xregexp for parsing and executing regex. Check its website for more information.","title":"Basics"},{"location":"guide/basics/#basics","text":"Tip The example code blocks in this guide may not be valid scripts","title":"Basics"},{"location":"guide/basics/#comments","text":"Comments are written with a # : # this does nothing","title":"Comments"},{"location":"guide/basics/#literals","text":"There's a few types of literals in psithurism:","title":"Literals"},{"location":"guide/basics/#strings","text":"Strings are written between pairs of either double or single quotes. 'Hello' \"reader\" Single quotes Double quotes A single quoted string is assumed to be encoded according to psithurism's codepage. '\u2228' # one byte Note Since there currently is no actual codepage, single and double quoted stings are both assumed to be UTF-8. A double quoted string is assumed to be UTF-8. \"\u2228\" # three bytes","title":"Strings"},{"location":"guide/basics/#numbers","text":"Numbers are pretty straightforward: 7 2.5 .125 - 4.9 This is not allowed however: 3.","title":"Numbers"},{"location":"guide/basics/#lists-arrays","text":"Lists and arrays are similar, but not quite the same. List items are expanded into separate arguments of the next function in the chain. This means nesting lists has no effect. A list is written between parentheses: # these are the same ( 1 , 2 , 3 ) ( 1 , ( 2 , 3 )) The whole array is passed to the next function as one argument. This also allows for nested arrays. An array is written between square brackets: # these are not the same [ 1 , 2 , 3 , 4 ] [[ 1 , 2 ], [ 3 , 4 ]]","title":"Lists &amp; Arrays"},{"location":"guide/basics/#regex","text":"Just like javascript, psithurism has regex literals: /\\/((?:[^\\/\\\\\\n]|\\\\[^])*)\\/([gimuynsxA]*)/s Psithurism uses xregexp for parsing and executing regex. Check its website for more information.","title":"Regex"},{"location":"guide/builtins/","text":"Builtins Psithurism provides some builtin functions to help you write your programs. For the full list, check the documentation . Printing . prints any arguments to stdout, with a newline at the end. . '\ud83c\udf43' Passthrough = returns its arguments unchanged. 3 | =+= # 6 Arithmetic The most obvious use of these is as operators, but they can also be called like any other function, with any number of arguments. If an array is passed as one of its arguments, the operation is applied to each element, returning an array. + : addition - : subtraction * : mutiplication / : division % : modulus ^ : exponentiation","title":"Builtins"},{"location":"guide/builtins/#builtins","text":"Psithurism provides some builtin functions to help you write your programs. For the full list, check the documentation .","title":"Builtins"},{"location":"guide/builtins/#printing","text":". prints any arguments to stdout, with a newline at the end. . '\ud83c\udf43'","title":"Printing"},{"location":"guide/builtins/#passthrough","text":"= returns its arguments unchanged. 3 | =+= # 6","title":"Passthrough"},{"location":"guide/builtins/#arithmetic","text":"The most obvious use of these is as operators, but they can also be called like any other function, with any number of arguments. If an array is passed as one of its arguments, the operation is applied to each element, returning an array. + : addition - : subtraction * : mutiplication / : division % : modulus ^ : exponentiation","title":"Arithmetic"},{"location":"guide/functions/","text":"Functions In psithurism, everything is a function, and can therefore usually be called like one. There's multiple ways to call a function: Parentheses greet ( 'reader' ) This is probably the form you're most used to, but quickly gets confusing if nested too much. min ( max ( value , 0 ), 100 ) Note You can't call literals this way: 'Hello' ( 'reader!' ) # this is not allowed Pipes Taking inspiration from shell scripting, psithurism adds pipes as a way to call functions: 'reader' | greet This improves readability, but you would still need to do things like this: (( 0 , value ) | max , 100 ) | min There are two other types of pipes: Expand Expand pipes act as a for-each loop over their arguments: ( 1 , 2 , 3 , 4 , 5 ) < . # prints each element separately Merge Merge pipes flatten their arguments by one level, and return them as arrays: ( 1 , 2 , [ 3 , 4 ], [[ 5 ]]) > = # [1, 2, 3, 4, [5]] Implicit function calls If you want to call a function with a single literal value, you can leave out the parentheses: greet 'reader' Calling a function with parentheses is actually just this, but with a list literal. Combining them If you use parentheses and a pipe on the same function, that counts as one function call, with the passed arguments placed before the piped arguments. Combining this with implicit calling may improve readability even more: value | max 0 | min 100 Operators Any function can also be used as operator: 0 max value min 100 Some builtin operators have a different precedence: operator(s) precedence | , < , > 0 ? , : , ?: 1 + , - 2 * , / , % 3 ^ 4 others 5","title":"Functions"},{"location":"guide/functions/#functions","text":"In psithurism, everything is a function, and can therefore usually be called like one. There's multiple ways to call a function:","title":"Functions"},{"location":"guide/functions/#parentheses","text":"greet ( 'reader' ) This is probably the form you're most used to, but quickly gets confusing if nested too much. min ( max ( value , 0 ), 100 ) Note You can't call literals this way: 'Hello' ( 'reader!' ) # this is not allowed","title":"Parentheses"},{"location":"guide/functions/#pipes","text":"Taking inspiration from shell scripting, psithurism adds pipes as a way to call functions: 'reader' | greet This improves readability, but you would still need to do things like this: (( 0 , value ) | max , 100 ) | min There are two other types of pipes:","title":"Pipes"},{"location":"guide/functions/#expand","text":"Expand pipes act as a for-each loop over their arguments: ( 1 , 2 , 3 , 4 , 5 ) < . # prints each element separately","title":"Expand"},{"location":"guide/functions/#merge","text":"Merge pipes flatten their arguments by one level, and return them as arrays: ( 1 , 2 , [ 3 , 4 ], [[ 5 ]]) > = # [1, 2, 3, 4, [5]]","title":"Merge"},{"location":"guide/functions/#implicit-function-calls","text":"If you want to call a function with a single literal value, you can leave out the parentheses: greet 'reader' Calling a function with parentheses is actually just this, but with a list literal.","title":"Implicit function calls"},{"location":"guide/functions/#combining-them","text":"If you use parentheses and a pipe on the same function, that counts as one function call, with the passed arguments placed before the piped arguments. Combining this with implicit calling may improve readability even more: value | max 0 | min 100","title":"Combining them"},{"location":"guide/functions/#operators","text":"Any function can also be used as operator: 0 max value min 100 Some builtin operators have a different precedence: operator(s) precedence | , < , > 0 ? , : , ?: 1 + , - 2 * , / , % 3 ^ 4 others 5","title":"Operators"},{"location":"guide/install/","text":"Install Global Local To install psithurism globally, run the following command on a system with nodejs: npm i -g psithurism To install psithurism locally, run the following command in a nodejs project: npm i psithurism Warning You will need to replace sidhe in commands with npx sidhe . To verify you installed psithurism correctly, run: sidhe --version This should print the version of psithurism you installed. Sidhe sidhe is a CLI program bundled with psithurism that can compile and run your scripts. Usage Usage: sidhe [options] [command] compiles and runs psithurism scripts Options: -V, --version output the version number -h, --help display help for command Commands: compile [options] <file> compile a psithurism script run [options] <file> run a compiled script help [command] display help for command To view this information in your shell, run: sidhe --help","title":"Install"},{"location":"guide/install/#install","text":"Global Local To install psithurism globally, run the following command on a system with nodejs: npm i -g psithurism To install psithurism locally, run the following command in a nodejs project: npm i psithurism Warning You will need to replace sidhe in commands with npx sidhe . To verify you installed psithurism correctly, run: sidhe --version This should print the version of psithurism you installed.","title":"Install"},{"location":"guide/install/#sidhe","text":"sidhe is a CLI program bundled with psithurism that can compile and run your scripts.","title":"Sidhe"},{"location":"guide/install/#usage","text":"Usage: sidhe [options] [command] compiles and runs psithurism scripts Options: -V, --version output the version number -h, --help display help for command Commands: compile [options] <file> compile a psithurism script run [options] <file> run a compiled script help [command] display help for command To view this information in your shell, run: sidhe --help","title":"Usage"}]}