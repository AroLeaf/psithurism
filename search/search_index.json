{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Psithurism New here? Check out the guide ! A programming language with | pipes.","title":"Psithurism"},{"location":"#psithurism","text":"New here? Check out the guide ! A programming language with | pipes.","title":"Psithurism"},{"location":"documentation/","text":"Documentation","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"guide/","text":"Guide Welcome to the guide to the psithurism programming language. To get started, you could check how to install psithurism, look at the basics of the language, or dive straight into the documentation .","title":"Guide"},{"location":"guide/#guide","text":"Welcome to the guide to the psithurism programming language. To get started, you could check how to install psithurism, look at the basics of the language, or dive straight into the documentation .","title":"Guide"},{"location":"guide/basics/","text":"Basics Literals String Strings are between pairs of single or double quotes: 'Hello,' \"World!\" 'I \\' m a string!' Numbers Numbers are simple too: 7 2.5 .125 - 4.9 3e333 Lists & Arrays Lists and arrays are similar, but not quite the same. Lists are flattened recursively. This means nesting lists has no effect. A list is written between parentheses: # these are the same ( 1 , 2 , 3 ) ( 1 , ( 2 , 3 )) Arrays are not flattened. This allows for nested arrays. An array is written between square brackets: # these are not the same [ 1 , 2 , 3 , 4 ] [[ 1 , 2 ], [ 3 , 4 ]] Functions In psithurism, everything is a function. 'hello!' # function < 10 # function _ # function myFunc () # function (sort of) 1 ~ 101 \u227a\u2228 (( % 3 ? : 'Fizz' ) + ( % 5 ? : 'Buzz' )) \u227b\u2026 # function This makes psithurism a very flexible language, since everything fits almost everywhere. Calling functions The main way of calling a function is using pipes: # `\u2026` pretty-prints its arguments 'Hello, World!' | \u2026 You can also call a function with a single argument directly, if the argument is a literal, and the function is not: \u2026 '\ud83c\udf43' + ( 5 , 5 ) # remember, lists are literals A function called with a literal still takes its piped arguments as arguments: 5 |+ 5 # 10 The third way to call a function is as operator. This can again not be done with a literal as operator: 5 + 5 4 + 3 * 6 # math operators keep their precedence, this is 4+(3*6) 7 \u02592 # 7 to the 2nd power Defining custom functions Functions are defined using \u2254 : greet \u2254 'Hello, ' + _ + '!' ; greet ( 'reader' ) # 'Hello, reader!' Note Calling a user-defined function treats all its arguments as piped arugments, putting arugments that are actually passed to it before those actually piped to it.","title":"Basics"},{"location":"guide/basics/#basics","text":"","title":"Basics"},{"location":"guide/basics/#literals","text":"","title":"Literals"},{"location":"guide/basics/#string","text":"Strings are between pairs of single or double quotes: 'Hello,' \"World!\" 'I \\' m a string!'","title":"String"},{"location":"guide/basics/#numbers","text":"Numbers are simple too: 7 2.5 .125 - 4.9 3e333","title":"Numbers"},{"location":"guide/basics/#lists-arrays","text":"Lists and arrays are similar, but not quite the same. Lists are flattened recursively. This means nesting lists has no effect. A list is written between parentheses: # these are the same ( 1 , 2 , 3 ) ( 1 , ( 2 , 3 )) Arrays are not flattened. This allows for nested arrays. An array is written between square brackets: # these are not the same [ 1 , 2 , 3 , 4 ] [[ 1 , 2 ], [ 3 , 4 ]]","title":"Lists &amp; Arrays"},{"location":"guide/basics/#functions","text":"In psithurism, everything is a function. 'hello!' # function < 10 # function _ # function myFunc () # function (sort of) 1 ~ 101 \u227a\u2228 (( % 3 ? : 'Fizz' ) + ( % 5 ? : 'Buzz' )) \u227b\u2026 # function This makes psithurism a very flexible language, since everything fits almost everywhere.","title":"Functions"},{"location":"guide/basics/#calling-functions","text":"The main way of calling a function is using pipes: # `\u2026` pretty-prints its arguments 'Hello, World!' | \u2026 You can also call a function with a single argument directly, if the argument is a literal, and the function is not: \u2026 '\ud83c\udf43' + ( 5 , 5 ) # remember, lists are literals A function called with a literal still takes its piped arguments as arguments: 5 |+ 5 # 10 The third way to call a function is as operator. This can again not be done with a literal as operator: 5 + 5 4 + 3 * 6 # math operators keep their precedence, this is 4+(3*6) 7 \u02592 # 7 to the 2nd power","title":"Calling functions"},{"location":"guide/basics/#defining-custom-functions","text":"Functions are defined using \u2254 : greet \u2254 'Hello, ' + _ + '!' ; greet ( 'reader' ) # 'Hello, reader!' Note Calling a user-defined function treats all its arguments as piped arugments, putting arugments that are actually passed to it before those actually piped to it.","title":"Defining custom functions"},{"location":"guide/install/","text":"Install Global Local To install psithurism globally, run the following command on a system with Node.js : npm i -g psithurism Or the following on a system with Bun : bun add -g psithurism To install psithurism locally, run the following command in a Node.js project: npm i psithurism Or the following in a Bun project: bun add psithurism Warning When using Node.js, you will need to replace sidhe in commands with npx sidhe . Invoking sidhe from the command line in a Bun project is currently not supported. To verify you installed psithurism correctly, run: sidhe --version This should print the version of psithurism you installed. Sidhe sidhe is a CLI program bundled with psithurism that can compile and run your scripts. Usage usage: sidhe <command> [...flags] [...args] sidhe compile [...flags] <in> [out] compile a psithurism script to JS sidhe run [...flags] <in> [...argv] run a psithurism script directly flags -r/--raw : treat <in> as code instead of filepath -m/--minify : minify the resulting code when compiling args in : script source, filepath or code (requires -r to be set) out : compiled script location, filepath, stdout when not provided argv : the arguments passed to the script, as JSON strings To view this information in your shell, run: sidhe --help","title":"Install"},{"location":"guide/install/#install","text":"Global Local To install psithurism globally, run the following command on a system with Node.js : npm i -g psithurism Or the following on a system with Bun : bun add -g psithurism To install psithurism locally, run the following command in a Node.js project: npm i psithurism Or the following in a Bun project: bun add psithurism Warning When using Node.js, you will need to replace sidhe in commands with npx sidhe . Invoking sidhe from the command line in a Bun project is currently not supported. To verify you installed psithurism correctly, run: sidhe --version This should print the version of psithurism you installed.","title":"Install"},{"location":"guide/install/#sidhe","text":"sidhe is a CLI program bundled with psithurism that can compile and run your scripts.","title":"Sidhe"},{"location":"guide/install/#usage","text":"usage: sidhe <command> [...flags] [...args] sidhe compile [...flags] <in> [out] compile a psithurism script to JS sidhe run [...flags] <in> [...argv] run a psithurism script directly flags -r/--raw : treat <in> as code instead of filepath -m/--minify : minify the resulting code when compiling args in : script source, filepath or code (requires -r to be set) out : compiled script location, filepath, stdout when not provided argv : the arguments passed to the script, as JSON strings To view this information in your shell, run: sidhe --help","title":"Usage"},{"location":"guide/pipes/","text":"Pipes Besides the default pipe | mentioned in the basics , there are two other types. Spread Pipe The spread pipe \u227a is like a foreach, it calls the next function in the chain for each of its arguments, and returns the results as arrays. [ 1 , 2 , 3 , 4 , 5 ] \u227a \u2264 3 # ([true], [true], [true], [false], [false]) Merge Pipe The merge pipe \u227b flattens its arguments with a depth of one. ([ true ], [ 1 , 2 , 3 ], [[ 4 , 5 ], 6 ]) \u227b _ # (true, 1, 2, 3, [4, 5], 6) All pipes have the same precedence, so to use pipes within a spread pipe's chain, you will need to use parentheses. [ 1 , 2 , 3 , 4 , 5 ] \u227a % 2 > 0 | \u2026 # true false true false true [ 1 , 2 , 3 , 4 , 5 ] \u227a ( % 2 > 0 | \u2026 ) # true # false # true # false # true","title":"Pipes"},{"location":"guide/pipes/#pipes","text":"Besides the default pipe | mentioned in the basics , there are two other types.","title":"Pipes"},{"location":"guide/pipes/#spread-pipe","text":"The spread pipe \u227a is like a foreach, it calls the next function in the chain for each of its arguments, and returns the results as arrays. [ 1 , 2 , 3 , 4 , 5 ] \u227a \u2264 3 # ([true], [true], [true], [false], [false])","title":"Spread Pipe"},{"location":"guide/pipes/#merge-pipe","text":"The merge pipe \u227b flattens its arguments with a depth of one. ([ true ], [ 1 , 2 , 3 ], [[ 4 , 5 ], 6 ]) \u227b _ # (true, 1, 2, 3, [4, 5], 6) All pipes have the same precedence, so to use pipes within a spread pipe's chain, you will need to use parentheses. [ 1 , 2 , 3 , 4 , 5 ] \u227a % 2 > 0 | \u2026 # true false true false true [ 1 , 2 , 3 , 4 , 5 ] \u227a ( % 2 > 0 | \u2026 ) # true # false # true # false # true","title":"Merge Pipe"}]}